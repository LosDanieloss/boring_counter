// Mocks generated by Mockito 5.4.4 from annotations
// in boring_counter/test/unit_test/domain/counter/use_case/increment_counter_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:boring_counter/domain/counter/counter.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCounter_0 extends _i1.SmartFake implements _i2.Counter {
  _FakeCounter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CounterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCounterRepository extends _i1.Mock implements _i2.CounterRepository {
  @override
  _i3.Stream<List<_i2.Counter>> watchCounters() => (super.noSuchMethod(
        Invocation.method(
          #watchCounters,
          [],
        ),
        returnValue: _i3.Stream<List<_i2.Counter>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<_i2.Counter>>.empty(),
      ) as _i3.Stream<List<_i2.Counter>>);

  @override
  _i3.Stream<_i2.Counter> watchCounter({required String? counterId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchCounter,
          [],
          {#counterId: counterId},
        ),
        returnValue: _i3.Stream<_i2.Counter>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.Counter>.empty(),
      ) as _i3.Stream<_i2.Counter>);

  @override
  _i3.Future<_i2.Counter> createCounter({required String? name}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCounter,
          [],
          {#name: name},
        ),
        returnValue: _i3.Future<_i2.Counter>.value(_FakeCounter_0(
          this,
          Invocation.method(
            #createCounter,
            [],
            {#name: name},
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Counter>.value(_FakeCounter_0(
          this,
          Invocation.method(
            #createCounter,
            [],
            {#name: name},
          ),
        )),
      ) as _i3.Future<_i2.Counter>);

  @override
  _i3.Future<_i2.Counter> getCounter({required String? counterId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCounter,
          [],
          {#counterId: counterId},
        ),
        returnValue: _i3.Future<_i2.Counter>.value(_FakeCounter_0(
          this,
          Invocation.method(
            #getCounter,
            [],
            {#counterId: counterId},
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Counter>.value(_FakeCounter_0(
          this,
          Invocation.method(
            #getCounter,
            [],
            {#counterId: counterId},
          ),
        )),
      ) as _i3.Future<_i2.Counter>);

  @override
  _i3.Future<_i2.Counter> updateCounter(
          {required _i2.Counter? updatedCounter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCounter,
          [],
          {#updatedCounter: updatedCounter},
        ),
        returnValue: _i3.Future<_i2.Counter>.value(_FakeCounter_0(
          this,
          Invocation.method(
            #updateCounter,
            [],
            {#updatedCounter: updatedCounter},
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Counter>.value(_FakeCounter_0(
          this,
          Invocation.method(
            #updateCounter,
            [],
            {#updatedCounter: updatedCounter},
          ),
        )),
      ) as _i3.Future<_i2.Counter>);
}
