// Mocks generated by Mockito 5.4.4 from annotations
// in boring_counter/test/unit_test/presentation/counter/cubit/counter_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:boring_counter/domain/counter/counter.dart' as _i2;
import 'package:boring_counter/presentation/counter/mapper/ui_counter_mapper.dart'
    as _i5;
import 'package:boring_counter/presentation/counter/model/ui_counter.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCounterRepository_0 extends _i1.SmartFake
    implements _i2.CounterRepository {
  _FakeCounterRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCounter_1 extends _i1.SmartFake implements _i2.Counter {
  _FakeCounter_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUiCounter_2 extends _i1.SmartFake implements _i3.UiCounter {
  _FakeUiCounter_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WatchCounterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchCounterUseCase extends _i1.Mock
    implements _i2.WatchCounterUseCase {
  @override
  _i2.CounterRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCounterRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCounterRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CounterRepository);

  @override
  _i4.Stream<_i2.Counter> watch({required String? counterId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#counterId: counterId},
        ),
        returnValue: _i4.Stream<_i2.Counter>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.Counter>.empty(),
      ) as _i4.Stream<_i2.Counter>);
}

/// A class which mocks [IncrementCounterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIncrementCounterUseCase extends _i1.Mock
    implements _i2.IncrementCounterUseCase {
  @override
  _i2.CounterRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCounterRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCounterRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CounterRepository);

  @override
  _i4.Future<_i2.Counter> increment({required _i2.Counter? counter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #increment,
          [],
          {#counter: counter},
        ),
        returnValue: _i4.Future<_i2.Counter>.value(_FakeCounter_1(
          this,
          Invocation.method(
            #increment,
            [],
            {#counter: counter},
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Counter>.value(_FakeCounter_1(
          this,
          Invocation.method(
            #increment,
            [],
            {#counter: counter},
          ),
        )),
      ) as _i4.Future<_i2.Counter>);
}

/// A class which mocks [DecrementCounterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDecrementCounterUseCase extends _i1.Mock
    implements _i2.DecrementCounterUseCase {
  @override
  _i2.CounterRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCounterRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCounterRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CounterRepository);

  @override
  _i4.Future<_i2.Counter> decrement({required _i2.Counter? counter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #decrement,
          [],
          {#counter: counter},
        ),
        returnValue: _i4.Future<_i2.Counter>.value(_FakeCounter_1(
          this,
          Invocation.method(
            #decrement,
            [],
            {#counter: counter},
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Counter>.value(_FakeCounter_1(
          this,
          Invocation.method(
            #decrement,
            [],
            {#counter: counter},
          ),
        )),
      ) as _i4.Future<_i2.Counter>);
}

/// A class which mocks [UiCounterMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockUiCounterMapper extends _i1.Mock implements _i5.UiCounterMapper {
  @override
  _i2.Counter toDomain({required _i3.UiCounter? uiCounter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDomain,
          [],
          {#uiCounter: uiCounter},
        ),
        returnValue: _FakeCounter_1(
          this,
          Invocation.method(
            #toDomain,
            [],
            {#uiCounter: uiCounter},
          ),
        ),
        returnValueForMissingStub: _FakeCounter_1(
          this,
          Invocation.method(
            #toDomain,
            [],
            {#uiCounter: uiCounter},
          ),
        ),
      ) as _i2.Counter);

  @override
  _i3.UiCounter toPresentation({required _i2.Counter? counter}) =>
      (super.noSuchMethod(
        Invocation.method(
          #toPresentation,
          [],
          {#counter: counter},
        ),
        returnValue: _FakeUiCounter_2(
          this,
          Invocation.method(
            #toPresentation,
            [],
            {#counter: counter},
          ),
        ),
        returnValueForMissingStub: _FakeUiCounter_2(
          this,
          Invocation.method(
            #toPresentation,
            [],
            {#counter: counter},
          ),
        ),
      ) as _i3.UiCounter);
}
