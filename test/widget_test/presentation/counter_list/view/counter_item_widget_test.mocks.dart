// Mocks generated by Mockito 5.4.0 from annotations
// in boring_counter/test/widget_test/presentation/counter_list/view/counter_item_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:auto_route/auto_route.dart' as _i3;
import 'package:auto_route/src/matcher/route_matcher.dart' as _i4;
import 'package:auto_route/src/router/controller/navigation_history/navigation_history_base.dart'
    as _i5;
import 'package:flutter/foundation.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocalKey_0 extends _i1.SmartFake implements _i2.LocalKey {
  _FakeLocalKey_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteCollection_1 extends _i1.SmartFake
    implements _i3.RouteCollection {
  _FakeRouteCollection_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAutoRoutePage_2<T> extends _i1.SmartFake
    implements _i3.AutoRoutePage<T> {
  _FakeAutoRoutePage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteMatcher_3 extends _i1.SmartFake implements _i4.RouteMatcher {
  _FakeRouteMatcher_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteData_4 extends _i1.SmartFake implements _i3.RouteData {
  _FakeRouteData_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNavigationHistory_5 extends _i1.SmartFake
    implements _i5.NavigationHistory {
  _FakeNavigationHistory_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUrlState_6 extends _i1.SmartFake implements _i3.UrlState {
  _FakeUrlState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRootStackRouter_7 extends _i1.SmartFake
    implements _i3.RootStackRouter {
  _FakeRootStackRouter_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteMatch_8<T> extends _i1.SmartFake implements _i3.RouteMatch<T> {
  _FakeRouteMatch_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoutingController_9 extends _i1.SmartFake
    implements _i3.RoutingController {
  _FakeRoutingController_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TabsRouter].
///
/// See the documentation for Mockito's code generation for more information.
class MockTabsRouter extends _i1.Mock implements _i3.TabsRouter {
  @override
  _i2.LocalKey get key => (super.noSuchMethod(
        Invocation.getter(#key),
        returnValue: _FakeLocalKey_0(
          this,
          Invocation.getter(#key),
        ),
        returnValueForMissingStub: _FakeLocalKey_0(
          this,
          Invocation.getter(#key),
        ),
      ) as _i2.LocalKey);
  @override
  _i3.RouteCollection get routeCollection => (super.noSuchMethod(
        Invocation.getter(#routeCollection),
        returnValue: _FakeRouteCollection_1(
          this,
          Invocation.getter(#routeCollection),
        ),
        returnValueForMissingStub: _FakeRouteCollection_1(
          this,
          Invocation.getter(#routeCollection),
        ),
      ) as _i3.RouteCollection);
  @override
  _i3.PageBuilder get pageBuilder => (super.noSuchMethod(
        Invocation.getter(#pageBuilder),
        returnValue: (_i3.RouteData data) => _FakeAutoRoutePage_2<dynamic>(
          this,
          Invocation.getter(#pageBuilder),
        ),
        returnValueForMissingStub: (_i3.RouteData data) =>
            _FakeAutoRoutePage_2<dynamic>(
          this,
          Invocation.getter(#pageBuilder),
        ),
      ) as _i3.PageBuilder);
  @override
  _i4.RouteMatcher get matcher => (super.noSuchMethod(
        Invocation.getter(#matcher),
        returnValue: _FakeRouteMatcher_3(
          this,
          Invocation.getter(#matcher),
        ),
        returnValueForMissingStub: _FakeRouteMatcher_3(
          this,
          Invocation.getter(#matcher),
        ),
      ) as _i4.RouteMatcher);
  @override
  int get homeIndex => (super.noSuchMethod(
        Invocation.getter(#homeIndex),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i3.RouteData get routeData => (super.noSuchMethod(
        Invocation.getter(#routeData),
        returnValue: _FakeRouteData_4(
          this,
          Invocation.getter(#routeData),
        ),
        returnValueForMissingStub: _FakeRouteData_4(
          this,
          Invocation.getter(#routeData),
        ),
      ) as _i3.RouteData);
  @override
  _i3.RouteData get current => (super.noSuchMethod(
        Invocation.getter(#current),
        returnValue: _FakeRouteData_4(
          this,
          Invocation.getter(#current),
        ),
        returnValueForMissingStub: _FakeRouteData_4(
          this,
          Invocation.getter(#current),
        ),
      ) as _i3.RouteData);
  @override
  int get activeIndex => (super.noSuchMethod(
        Invocation.getter(#activeIndex),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  List<_i3.AutoRoutePage<dynamic>> get stack => (super.noSuchMethod(
        Invocation.getter(#stack),
        returnValue: <_i3.AutoRoutePage<dynamic>>[],
        returnValueForMissingStub: <_i3.AutoRoutePage<dynamic>>[],
      ) as List<_i3.AutoRoutePage<dynamic>>);
  @override
  bool get canPopSelfOrChildren => (super.noSuchMethod(
        Invocation.getter(#canPopSelfOrChildren),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get managedByWidget => (super.noSuchMethod(
        Invocation.getter(#managedByWidget),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get ignorePopCompleters => (super.noSuchMethod(
        Invocation.getter(#ignorePopCompleters),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set ignorePopCompleters(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #ignorePopCompleters,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i3.RoutingController> get childControllers => (super.noSuchMethod(
        Invocation.getter(#childControllers),
        returnValue: <_i3.RoutingController>[],
        returnValueForMissingStub: <_i3.RoutingController>[],
      ) as List<_i3.RoutingController>);
  @override
  _i5.NavigationHistory get navigationHistory => (super.noSuchMethod(
        Invocation.getter(#navigationHistory),
        returnValue: _FakeNavigationHistory_5(
          this,
          Invocation.getter(#navigationHistory),
        ),
        returnValueForMissingStub: _FakeNavigationHistory_5(
          this,
          Invocation.getter(#navigationHistory),
        ),
      ) as _i5.NavigationHistory);
  @override
  _i3.UrlState get urlState => (super.noSuchMethod(
        Invocation.getter(#urlState),
        returnValue: _FakeUrlState_6(
          this,
          Invocation.getter(#urlState),
        ),
        returnValueForMissingStub: _FakeUrlState_6(
          this,
          Invocation.getter(#urlState),
        ),
      ) as _i3.UrlState);
  @override
  String get currentPath => (super.noSuchMethod(
        Invocation.getter(#currentPath),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get currentUrl => (super.noSuchMethod(
        Invocation.getter(#currentUrl),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  List<_i3.RouteData> get stackData => (super.noSuchMethod(
        Invocation.getter(#stackData),
        returnValue: <_i3.RouteData>[],
        returnValueForMissingStub: <_i3.RouteData>[],
      ) as List<_i3.RouteData>);
  @override
  int get stateHash => (super.noSuchMethod(
        Invocation.getter(#stateHash),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get isTopMost => (super.noSuchMethod(
        Invocation.getter(#isTopMost),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get canNavigateBack => (super.noSuchMethod(
        Invocation.getter(#canNavigateBack),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.RootStackRouter get root => (super.noSuchMethod(
        Invocation.getter(#root),
        returnValue: _FakeRootStackRouter_7(
          this,
          Invocation.getter(#root),
        ),
        returnValueForMissingStub: _FakeRootStackRouter_7(
          this,
          Invocation.getter(#root),
        ),
      ) as _i3.RootStackRouter);
  @override
  bool get isRoot => (super.noSuchMethod(
        Invocation.getter(#isRoot),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.RouteData get topRoute => (super.noSuchMethod(
        Invocation.getter(#topRoute),
        returnValue: _FakeRouteData_4(
          this,
          Invocation.getter(#topRoute),
        ),
        returnValueForMissingStub: _FakeRouteData_4(
          this,
          Invocation.getter(#topRoute),
        ),
      ) as _i3.RouteData);
  @override
  _i3.RouteMatch<dynamic> get topMatch => (super.noSuchMethod(
        Invocation.getter(#topMatch),
        returnValue: _FakeRouteMatch_8<dynamic>(
          this,
          Invocation.getter(#topMatch),
        ),
        returnValueForMissingStub: _FakeRouteMatch_8<dynamic>(
          this,
          Invocation.getter(#topMatch),
        ),
      ) as _i3.RouteMatch<dynamic>);
  @override
  bool get hasEntries => (super.noSuchMethod(
        Invocation.getter(#hasEntries),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get pageCount => (super.noSuchMethod(
        Invocation.getter(#pageCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  List<_i3.RouteMatch<dynamic>> get currentSegments => (super.noSuchMethod(
        Invocation.getter(#currentSegments),
        returnValue: <_i3.RouteMatch<dynamic>>[],
        returnValueForMissingStub: <_i3.RouteMatch<dynamic>>[],
      ) as List<_i3.RouteMatch<dynamic>>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void updateRouteData(_i3.RouteData? data) => super.noSuchMethod(
        Invocation.method(
          #updateRouteData,
          [data],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setActiveIndex(
    int? index, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setActiveIndex,
          [index],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<bool> pop<T extends Object?>([T? result]) => (super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  void setupRoutes(List<_i3.PageRouteInfo<dynamic>>? routes) =>
      super.noSuchMethod(
        Invocation.method(
          #setupRoutes,
          [routes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void replaceAll(
    List<_i3.PageRouteInfo<dynamic>>? routes,
    _i3.PageRouteInfo<dynamic>? previousActiveRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #replaceAll,
          [
            routes,
            previousActiveRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.StackRouter? stackRouterOfIndex(int? index) => (super.noSuchMethod(
        Invocation.method(
          #stackRouterOfIndex,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i3.StackRouter?);
  @override
  bool canPop({
    bool? ignoreChildRoutes = false,
    bool? ignoreParentRoutes = false,
    bool? ignorePagelessRoutes = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #canPop,
          [],
          {
            #ignoreChildRoutes: ignoreChildRoutes,
            #ignoreParentRoutes: ignoreParentRoutes,
            #ignorePagelessRoutes: ignorePagelessRoutes,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void markUrlStateForReplace() => super.noSuchMethod(
        Invocation.method(
          #markUrlStateForReplace,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void attachChildController(_i3.RoutingController? childController) =>
      super.noSuchMethod(
        Invocation.method(
          #attachChildController,
          [childController],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeChildController(_i3.RoutingController? childController) =>
      super.noSuchMethod(
        Invocation.method(
          #removeChildController,
          [childController],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyAll({bool? forceUrlRebuild = false}) => super.noSuchMethod(
        Invocation.method(
          #notifyAll,
          [],
          {#forceUrlRebuild: forceUrlRebuild},
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i3.HierarchySegment> currentHierarchy({
    bool? asPath = false,
    bool? ignorePending = false,
    bool? ignoreParams = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #currentHierarchy,
          [],
          {
            #asPath: asPath,
            #ignorePending: ignorePending,
            #ignoreParams: ignoreParams,
          },
        ),
        returnValue: <_i3.HierarchySegment>[],
        returnValueForMissingStub: <_i3.HierarchySegment>[],
      ) as List<_i3.HierarchySegment>);
  @override
  bool isRouteActive(String? routeName) => (super.noSuchMethod(
        Invocation.method(
          #isRouteActive,
          [routeName],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isRouteDataActive(_i3.RouteData? data) => (super.noSuchMethod(
        Invocation.method(
          #isRouteDataActive,
          [data],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isPathActive(String? path) => (super.noSuchMethod(
        Invocation.method(
          #isPathActive,
          [path],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.RouteMatch<dynamic>? match(_i3.PageRouteInfo<dynamic>? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #match,
          [route],
        ),
        returnValueForMissingStub: null,
      ) as _i3.RouteMatch<dynamic>?);
  @override
  _i6.Future<dynamic> navigate(
    _i3.PageRouteInfo<dynamic>? route, {
    _i3.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigate,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i6.Future<dynamic>.value(),
        returnValueForMissingStub: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  _i6.Future<void> navigateNamed(
    String? path, {
    bool? includePrefixMatches = false,
    _i3.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateNamed,
          [path],
          {
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void navigateBack() => super.noSuchMethod(
        Invocation.method(
          #navigateBack,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void back() => super.noSuchMethod(
        Invocation.method(
          #back,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void pushPathState(Object? state) => super.noSuchMethod(
        Invocation.method(
          #pushPathState,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.RoutingController topMostRouter({bool? ignorePagelessRoutes = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #topMostRouter,
          [],
          {#ignorePagelessRoutes: ignorePagelessRoutes},
        ),
        returnValue: _FakeRoutingController_9(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
        returnValueForMissingStub: _FakeRoutingController_9(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
      ) as _i3.RoutingController);
  @override
  T? innerRouterOf<T extends _i3.RoutingController>(String? routeName) =>
      (super.noSuchMethod(
        Invocation.method(
          #innerRouterOf,
          [routeName],
        ),
        returnValueForMissingStub: null,
      ) as T?);
  @override
  _i6.Future<bool> popTop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(
        Invocation.method(
          #popTop,
          [result],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i3.PageRouteInfo<dynamic>? buildPageRoute(
    String? path, {
    bool? includePrefixMatches = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildPageRoute,
          [path],
          {#includePrefixMatches: includePrefixMatches},
        ),
        returnValueForMissingStub: null,
      ) as _i3.PageRouteInfo<dynamic>?);
  @override
  List<_i3.PageRouteInfo<dynamic>>? buildPageRoutesStack(
    String? path, {
    bool? includePrefixMatches = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildPageRoutesStack,
          [path],
          {#includePrefixMatches: includePrefixMatches},
        ),
        returnValueForMissingStub: null,
      ) as List<_i3.PageRouteInfo<dynamic>>?);
  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
